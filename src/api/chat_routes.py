from fastapi import HTTPException, UploadFile, Path
from typing import Dict, Any, List, Set, Optional
import threading
import io
import requests
from PIL import Image
import google.generativeai as genai
from collections import defaultdict

from src.models.schemas import ChatResponse, ImageInfo, PurchaseItem, CustomerInfo, ControlBotRequest
from src.services.intent_service import analyze_intent_and_extract_entities, extract_customer_info
from src.services.search_service import search_products, search_products_by_image
from src.services.response_service import generate_llm_response
from src.services.llm_service import analyze_image_with_vision
from src.utils.helpers import is_asking_for_more, format_history_text, sanitize_for_es
from src.config.settings import PAGE_SIZE
from src.services.response_service import evaluate_and_choose_product, evaluate_purchase_confirmation, filter_products_with_ai
from src.utils.get_customer_info import get_customer_store_info
from sqlalchemy.orm import Session
from database.database import (
    get_session_control, create_or_update_session_control, get_customer_is_sale, 
    add_chat_message, get_chat_history, get_full_chat_history, get_all_session_controls_by_customer,
    create_or_update_customer_profile, has_previous_orders, create_order, add_order_item,
    get_customer_profile_by_phone, get_customer_order_history, get_customer_profile,
    is_bot_active, power_off_bot_for_customer, power_on_bot_for_customer, get_bot_status,
    ChatHistory
)
import time
HANDOVER_TIMEOUT = 900

bot_running = True
bot_state_lock = threading.Lock()

def _get_product_key(product: Dict) -> str:
    """T·∫°o m·ªôt key ƒë·ªãnh danh duy nh·∫•t cho s·∫£n ph·∫©m."""
    return f"{product.get('product_name', '')}::{product.get('properties', '')}"

def _format_db_history(history_records: List[Any]) -> List[Dict[str, str]]:
    """Chuy·ªÉn ƒë·ªïi l·ªãch s·ª≠ chat t·ª´ DB sang ƒë·ªãnh d·∫°ng mong mu·ªën."""
    paired_history = []
    i = 0
    while i < len(history_records):
        if history_records[i].role == 'user':
            if i + 1 < len(history_records) and history_records[i+1].role == 'bot':
                paired_history.append({
                    "user": history_records[i].message,
                    "bot": history_records[i+1].message
                })
                i += 2
            else:
                paired_history.append({
                    "user": history_records[i].message,
                    "bot": ""
                })
                i += 1
        elif history_records[i].role == 'bot':
            paired_history.append({
                "user": "",
                "bot": history_records[i].message
            })
            i += 1
        else:
            i += 1
    return paired_history

def _get_customer_bot_status(db: Session, customer_id: str) -> str:
    """
    Ki·ªÉm tra tr·∫°ng th√°i bot c·ªßa customer d·ª±a tr√™n c√°c session hi·ªán c√≥.
    Tr·∫£ v·ªÅ 'stopped' n·∫øu t·∫•t c·∫£ sessions ƒë·ªÅu b·ªã d·ª´ng, 'active' n·∫øu ng∆∞·ª£c l·∫°i.
    """
    sessions = get_all_session_controls_by_customer(db, customer_id)
    
    if not sessions:
        return "active"  # M·∫∑c ƒë·ªãnh l√† active n·∫øu ch∆∞a c√≥ session n√†o
    
    # N·∫øu t·∫•t c·∫£ sessions ƒë·ªÅu b·ªã stopped, th√¨ customer bot b·ªã stopped
    stopped_sessions = [s for s in sessions if s.status == "stopped"]
    if len(stopped_sessions) == len(sessions):
        return "stopped"
    
    return "active"

def _update_session_state(db: Session, customer_id: str, session_id: str, status: str, session_data: dict):
    """C·∫≠p nh·∫≠t tr·∫°ng th√°i session trong c·∫£ database v√† memory"""
    print(f"üîß _update_session_state called: customer_id={customer_id}, session_id={session_id}, status={status}")
    print(f"   üìä Session data before update: state={session_data.get('state')}, handover_timestamp={session_data.get('handover_timestamp')}")
    
    # C·∫≠p nh·∫≠t memory state TR∆Ø·ªöC KHI l∆∞u v√†o database
    if status == "human_calling":
        session_data["state"] = "human_calling"
        session_data["handover_timestamp"] = time.time()
        print(f"   ‚úÖ Set session_data state = human_calling, handover_timestamp = {session_data['handover_timestamp']}")
    elif status == "active":
        session_data["state"] = None
        session_data["negativity_score"] = 0
        print(f"   ‚úÖ Set session_data state = None (active)")
    elif status == "stopped":
        session_data["state"] = "stop_bot"
        session_data["collected_customer_info"] = {}
        print(f"   ‚úÖ Set session_data state = stop_bot")
    elif status == "human_chatting":
        session_data["state"] = "human_chatting"
        session_data["handover_timestamp"] = time.time()
        print(f"   ‚úÖ Set session_data state = human_chatting, handover_timestamp = {session_data['handover_timestamp']}")
    
    # C·∫≠p nh·∫≠t database v·ªõi session_data ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
    print(f"   üìä Calling create_or_update_session_control with status={status}")
    print(f"   üìä Session data to save: state={session_data.get('state')}, handover_timestamp={session_data.get('handover_timestamp')}")
    
    try:
        result = create_or_update_session_control(db, customer_id, session_id, status=status, session_data=session_data)
        print(f"   ‚úÖ Database updated successfully. Session status in DB: {result.status}")
        print(f"   ‚úÖ Session data in DB: {result.session_data}")
        return result
    except Exception as e:
        print(f"   ‚ùå Database update failed: {e}")
        raise

async def chat_endpoint(
    customer_id: str,
    session_id: str,
    db: Session,
    message: str,
    model_choice: str,
    api_key: str,
    image_url: Optional[str] = None,
    image: Optional[UploadFile] = None
) -> ChatResponse:
    with bot_state_lock:
        if not bot_running:
            return ChatResponse(reply="", history=[], human_handover_required=False)
    
    # Ki·ªÉm tra tr·∫°ng th√°i bot cho customer n√†y
    if not is_bot_active(db, customer_id):
        return ChatResponse(
            reply="Bot hi·ªán ƒëang t·∫°m d·ª´ng cho customer n√†y.", 
            history=[], 
            human_handover_required=False
        )
    
    user_query = message
    model_choice = model_choice
    image_url = image_url
    api_key = api_key
    if not api_key:
        raise HTTPException(status_code=400, detail="B·∫°n ch∆∞a cung c·∫•p API key")
    
    if not user_query and not image_url and not image:
        raise HTTPException(status_code=400, detail="Kh√¥ng c√≥ tin nh·∫Øn ho·∫∑c h√¨nh ·∫£nh n√†o ƒë∆∞·ª£c g·ª≠i")

    sanitized_customer_id = sanitize_for_es(customer_id)
    
    # L·∫•y l·ªãch s·ª≠ chat t·ª´ DB
    db_history = get_chat_history(db, customer_id, session_id, limit=12)
    history = _format_db_history(db_history)

    # Ki·ªÉm tra kh√°ch h√†ng c√≥ ph·∫£i l√† sale kh√¥ng
    is_sale_customer = False
    customer_sale_info = get_customer_is_sale(db, customer_id, session_id)
    if customer_sale_info and customer_sale_info.is_sale:
        is_sale_customer = True

    # Ki·ªÉm tra tr·∫°ng th√°i session t·ª´ database
    session_control = get_session_control(db, customer_id, session_id)
    if session_control and session_control.session_data:
        session_data = session_control.session_data
        # ƒê·∫£m b·∫£o shown_product_keys lu√¥n l√† list ƒë·ªÉ tr√°nh l·ªói JSON serialization
        if 'shown_product_keys' in session_data and session_data['shown_product_keys'] is not None:
            # ƒê·∫£m b·∫£o l√† list, kh√¥ng ph·∫£i set
            if isinstance(session_data['shown_product_keys'], set):
                session_data['shown_product_keys'] = list(session_data['shown_product_keys'])
        else:
            session_data['shown_product_keys'] = []
    else:
        session_data = {
            "last_query": None,
            "offset": 0,
            "shown_product_keys": [],  # S·ª≠ d·ª•ng list thay v√¨ set
            "state": None, 
            "pending_purchase_item": None,
            "negativity_score": 0,
            "handover_timestamp": None,
            "collected_customer_info": {},
            "has_past_purchase": False,
            "pending_order": None
        }
    
    # N·∫øu ch∆∞a c√≥ session control, ki·ªÉm tra tr·∫°ng th√°i bot c·ªßa customer
    if session_control:
        session_status = session_control.status
    else:
        # Ki·ªÉm tra xem customer c√≥ bot b·ªã d·ª´ng kh√¥ng
        customer_bot_status = _get_customer_bot_status(db, customer_id)
        session_status = customer_bot_status
        
        # T·∫°o session m·ªõi v·ªõi tr·∫°ng th√°i ph√π h·ª£p
        if customer_bot_status == "stopped":
            session_data["state"] = "stop_bot"
            session_data["collected_customer_info"] = {}
        
        create_or_update_session_control(
            db, 
            customer_id=customer_id, 
            session_id=session_id, 
            status=session_status,
            session_data=session_data
        )

    # Ki·ªÉm tra tr·∫°ng th√°i t·ª´ database
    if session_status == "stopped":
        _update_chat_history(db, customer_id, session_id, user_query, "", session_data)
        final_history = _format_db_history(get_chat_history(db, customer_id, session_id, limit=50))
        return ChatResponse(reply="", history=final_history, human_handover_required=False)

    if session_status == "human_chatting":
        _update_chat_history(db, customer_id, session_id, user_query, "", session_data)
        final_history = _format_db_history(get_chat_history(db, customer_id, session_id, limit=50))
        return ChatResponse(reply="", history=final_history, human_handover_required=False)
    
    if session_data.get("state") == "human_calling":
        response_text = "D·∫°, nh√¢n vi√™n b√™n em ƒëang v√†o ngay ·∫°, anh/ch·ªã vui l√≤ng ƒë·ª£i trong gi√¢y l√°t."
        _update_chat_history(db, customer_id, session_id, user_query, response_text, session_data)
        final_history = _format_db_history(get_chat_history(db, customer_id, session_id, limit=50))
        return ChatResponse(reply=response_text, history=final_history, human_handover_required=False)
 
    API_ENDPOINT = "https://embed.doiquanai.vn/embed"
    if image_url or image:
        print(f"Ph√°t hi·ªán h√¨nh ·∫£nh, b·∫Øt ƒë·∫ßu x·ª≠ l√Ω...")
        embedding_vector = None
        try:
            if image_url:
                print(f" -> T·∫£i ·∫£nh t·ª´ URL: {image_url}")
                response = requests.post(API_ENDPOINT, data={"image_url": image_url}, timeout=15)
                response.raise_for_status()
            else: # image is present
                print(f" -> T·∫£i ·∫£nh t·ª´ file: {image.filename}")
                image_bytes = await image.read()
                content_type = image.content_type or "image/png"
                filename = image.filename or "image.png"

                files = {
                    "file": (filename, image_bytes, content_type)
                }
                response = requests.post(
                    API_ENDPOINT,
                    files=files,
                    timeout=15
                )
                response.raise_for_status()


            result = response.json()

            if "embedding" in result:
                embedding_vector = result["embedding"]
                print(" -> T·∫°o embedding cho ·∫£nh th√†nh c√¥ng.")
            else:
                print(" -> L·ªói t·ª´ API:", result.get("error", "Kh√¥ng r√µ l·ªói"))

            if embedding_vector:
                retrieved_data = search_products_by_image(sanitized_customer_id, embedding_vector)
                if retrieved_data:
                    if not user_query:
                        user_query = "·∫¢nh n√†y l√† s·∫£n ph·∫©m g√¨ v·∫≠y shop?"

                    response_text = generate_llm_response(
                        user_query=user_query,
                        search_results=retrieved_data,
                        history=history,
                        model_choice=model_choice,
                        is_image_search=True,
                        api_key=api_key,
                        db=db,
                        customer_id=customer_id,
                        is_sale=is_sale_customer
                    )
                    
                    _update_chat_history(db, customer_id, session_id, user_query, response_text, session_data)
                    final_history = _format_db_history(get_chat_history(db, customer_id, session_id, limit=50))
                    return ChatResponse(reply=response_text, history=final_history, human_handover_required=False)

            print(" -> Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m qua embedding, th·ª≠ ph√¢n t√≠ch b·∫±ng AI Vision...")
            image_bytes_for_vision = image_bytes
            image_description = analyze_image_with_vision(image_url=image_url, image_bytes=image_bytes_for_vision, api_key=api_key)
            if image_description:
                user_query = image_description
                print(f" -> AI Vision m√¥ t·∫£: {user_query}")
            else:
                response_text = "D·∫°, em ch∆∞a nh·∫≠n ra s·∫£n ph·∫©m ho·∫∑c n·ªôi dung trong ·∫£nh ·∫°. Anh/ch·ªã c√≥ th·ªÉ cho em th√™m th√¥ng tin ƒë∆∞·ª£c kh√¥ng?"
                _update_chat_history(db, customer_id, session_id, user_query, response_text, session_data)
                final_history = _format_db_history(get_chat_history(db, customer_id, session_id, limit=50))
                return ChatResponse(reply=response_text, history=final_history)

        except Exception as e:
            print(f"L·ªói nghi√™m tr·ªçng trong lu·ªìng x·ª≠ l√Ω ·∫£nh: {e}")
            return ChatResponse(reply="D·∫°, em xin l·ªói, em ch∆∞a xem ƒë∆∞·ª£c h√¨nh ·∫£nh c·ªßa m√¨nh ·∫°.", history=history)
    
    analysis_result = analyze_intent_and_extract_entities(user_query, history, model_choice, api_key=api_key)
    print(f"üîç Intent Analysis Result: {analysis_result}")
    print(f"üéØ wants_human_agent: {analysis_result.get('wants_human_agent')}")

    history_text_for_more = format_history_text(history, limit=4)
    asking_for_more = is_asking_for_more(user_query, history_text_for_more, api_key=api_key)

    retrieved_data, product_images = [], []
    response_text = ""

    if user_query.strip().lower() == "/bot":
        _update_session_state(db, customer_id, session_id, "active", session_data)
        response_text = "D·∫°, em c√≥ th·ªÉ gi√∫p g√¨ ti·∫øp cho anh/ch·ªã ·∫°?"
        _update_chat_history(db, customer_id, session_id, user_query, response_text, session_data)
        final_history = _format_db_history(get_chat_history(db, customer_id, session_id, limit=50))
        return ChatResponse(reply=response_text, history=final_history, human_handover_required=False)

    if session_data.get("state") == "awaiting_purchase_confirmation":
        history_text = format_history_text(history, limit=4)
        evaluation = evaluate_purchase_confirmation(user_query, history_text, model_choice, api_key=api_key)
        decision = evaluation.get("decision")
        if decision == "CONFIRM":
            collected_info = session_data.get("collected_customer_info", {})
            pending_items = session_data.get("pending_purchase_item", [])
            
            if not pending_items:
                response_text = "D·∫° c√≥ l·ªói x·∫£y ra, kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m c·∫ßn x√°c nh·∫≠n ·∫°."
                _update_session_state(db, customer_id, session_id, "active", session_data)
                _update_chat_history(db, customer_id, session_id, user_query, response_text, session_data)
                final_history = _format_db_history(get_chat_history(db, customer_id, session_id, limit=50))
                return ChatResponse(reply=response_text, history=final_history)

            if collected_info.get("name") and collected_info.get("phone") and collected_info.get("address"):
                purchase_items = []
                for item in pending_items:
                    item_data = item.get("evaluation", {}).get("product", {})
                    quantity = item.get("intent", {}).get("quantity", 1)
                    purchase_items.append(PurchaseItem(
                        product_name=item_data.get("product_name", "N/A"),
                        properties=item_data.get("properties"),
                        quantity=quantity
                    ))
                
                customer_info_obj = CustomerInfo(
                    name=collected_info.get("name"),
                    phone=collected_info.get("phone"),
                    address=collected_info.get("address"),
                    items=purchase_items
                )
                
                confirmed_names = [f"{item.quantity} x {item.product_name}" for item in purchase_items]
                response_text = f"D·∫° em ƒë√£ nh·∫≠n ƒë∆∞·ª£c th√¥ng tin cho c√°c s·∫£n ph·∫©m: {', '.join(confirmed_names)}. Em s·∫Ω t·∫°o m·ªôt ƒë∆°n h√†ng m·ªõi cho m√¨nh ·∫°. Em c·∫£m ∆°n anh/ch·ªã! /-heart"
                
                _update_session_state(db, customer_id, session_id, "active", session_data)
                session_data["pending_purchase_item"] = None
                session_data["has_past_purchase"] = True
                
                _update_chat_history(db, customer_id, session_id, user_query, response_text, session_data)
                final_history = _format_db_history(get_chat_history(db, customer_id, session_id, limit=50))
                
                return ChatResponse(
                    reply=response_text,
                    history=final_history,
                    human_handover_required=False,
                    customer_info=customer_info_obj,
                    has_purchase=True
                )
            else:
                response_text = (
                    f"D·∫° v√¢ng ·∫°. V·∫≠y ƒë·ªÉ ƒë·∫∑t ƒë∆°n h√†ng, anh/ch·ªã c√≥ th·ªÉ v√†o ƒë∆∞·ªùng link s·∫£n ph·∫©m ƒë·ªÉ ƒë·∫∑t h√†ng ho·∫∑c ƒë·∫øn xem tr·ª±c ti·∫øp t·∫°i c·ª≠a h√†ng ch√∫ng em t·∫°i s·ªë 8 ng√µ 117 Th√°i H√†, ƒê·ªëng ƒêa, H√† N·ªôi (th·ªùi gian m·ªü c·ª≠a t·ª´ 8h ƒë·∫øn 18h).\n"
                    "\nD·∫° anh/ch·ªã vui l√≤ng cho em xin t√™n, s·ªë ƒëi·ªán tho·∫°i v√† ƒë·ªãa ch·ªâ ƒë·ªÉ em l√™n ƒë∆°n cho anh/ch·ªã ·∫°. /-ok\n"
                    "Em c·∫£m ∆°n anh/ch·ªã nhi·ªÅu ·∫°. /-heart"
                )
                session_data["state"] = "awaiting_customer_info"
                
                _update_chat_history(db, customer_id, session_id, user_query, response_text, session_data)
                final_history = _format_db_history(get_chat_history(db, customer_id, session_id, limit=50))
                return ChatResponse(reply=response_text, history=final_history, human_handover_required=False)
        elif decision == "CANCEL":
            response_text = "D·∫°, em ƒë√£ h·ªßy y√™u c·∫ßu ƒë·∫∑t mua s·∫£n ph·∫©m, n·∫øu anh/ch·ªã mu·ªën mua s·∫£n ph·∫©m kh√°c th√¨ b√°o l·∫°i cho em ·∫°. /-heart"
            _update_session_state(db, customer_id, session_id, "active", session_data)
            session_data["pending_purchase_item"] = None
            _update_chat_history(db, customer_id, session_id, user_query, response_text, session_data)
            final_history = _format_db_history(get_chat_history(db, customer_id, session_id, limit=50))
            return ChatResponse(reply=response_text, history=final_history, human_handover_required=False)
        else:
            _update_session_state(db, customer_id, session_id, "active", session_data)
            session_data["pending_purchase_item"] = None

    if session_data.get("state") == "awaiting_customer_info":
        if analysis_result.get("is_purchase_intent") or analysis_result.get("is_add_to_order_intent"):
            new_products_from_intent = analysis_result.get("search_params", {}).get("products", [])
            if new_products_from_intent:
                existing_order_items = session_data.get("pending_purchase_item", [])
                new_order_items = [{"intent": item, "status": "pending", "evaluation": None} for item in new_products_from_intent]
                
                session_data["pending_order"] = existing_order_items + new_order_items
                _update_session_state(db, customer_id, session_id, "active", session_data)
                session_data["pending_purchase_item"] = None
                
                response_text = "D·∫° v√¢ng, anh/ch·ªã mu·ªën th√™m s·∫£n ph·∫©m n√†o v√†o ƒë∆°n h√†ng ·∫°?"
                _update_chat_history(db, customer_id, session_id, user_query, response_text, session_data)
                final_history = _format_db_history(get_chat_history(db, customer_id, session_id, limit=50))
                return ChatResponse(reply=response_text, history=final_history)
        else:
            # 1. Ki·ªÉm tra xem session n√†y ƒë√£ c√≥ profile/ƒë∆°n h√†ng tr∆∞·ªõc ƒë√¢y ch∆∞a
            existing_profile = get_customer_profile(db, customer_id, session_id)
            if existing_profile and has_previous_orders(db, customer_id, session_id=session_id):
                # Kh√°ch h√†ng c≈© - hi·ªÉn th·ªã th√¥ng tin ƒë·ªÉ x√°c nh·∫≠n
                order_history = get_customer_order_history(db, customer_id, session_id=session_id)
                last_order = order_history[0] if order_history else None

                response_parts = []
                response_parts.append(f"D·∫°, em th·∫•y anh/ch·ªã ƒë√£ t·ª´ng ƒë·∫∑t h√†ng v·ªõi th√¥ng tin:")
                response_parts.append(f"üë§ T√™n: {existing_profile.name}")
                response_parts.append(f"üìû SƒêT: {existing_profile.phone}")
                response_parts.append(f"üìç ƒê·ªãa ch·ªâ: {existing_profile.address}")
                
                if last_order:
                    response_parts.append(f"üì¶ ƒê∆°n h√†ng g·∫ßn nh·∫•t: {last_order.created_at.strftime('%d/%m/%Y')}")
                
                response_parts.append("Anh/ch·ªã c√≥ mu·ªën s·ª≠ d·ª•ng th√¥ng tin n√†y kh√¥ng ·∫°? N·∫øu c√≥ thay ƒë·ªïi g√¨ th√¨ cho em bi·∫øt ·∫°.")
                
                response_text = "\n".join(response_parts)
                
                # L∆∞u th√¥ng tin c≈© v√†o session ƒë·ªÉ s·ª≠ d·ª•ng
                session_data["collected_customer_info"] = {
                    "name": existing_profile.name,
                    "phone": existing_profile.phone,
                    "address": existing_profile.address
                }
                session_data["existing_profile_id"] = existing_profile.id
                
                _update_chat_history(db, customer_id, session_id, user_query, response_text, session_data)
                final_history = _format_db_history(get_chat_history(db, customer_id, session_id, limit=50))
                return ChatResponse(reply=response_text, history=final_history, human_handover_required=False)
            
            # 2. X·ª≠ l√Ω th√¥ng tin kh√°ch h√†ng (m·ªõi ho·∫∑c c·∫≠p nh·∫≠t)
            current_info = session_data.get("collected_customer_info", {})
            extracted_info = extract_customer_info(user_query, model_choice, api_key=api_key)

            # Merge th√¥ng tin m·ªõi v√†o th√¥ng tin hi·ªán c√≥
            for key, value in extracted_info.items():
                if value and value.strip():
                    current_info[key] = value

            missing_info = []
            if not current_info.get("name"):
                missing_info.append("t√™n")
            if not current_info.get("phone"):
                missing_info.append("s·ªë ƒëi·ªán tho·∫°i")
            if not current_info.get("address"):
                missing_info.append("ƒë·ªãa ch·ªâ")

            if missing_info:
                response_text = f"D·∫°, anh/ch·ªã vui l√≤ng cho em xin { ' v√† '.join(missing_info) } ƒë·ªÉ em l√™n ƒë∆°n ·∫°."
                session_data["collected_customer_info"] = current_info
                _update_chat_history(db, customer_id, session_id, user_query, response_text, session_data)
                final_history = _format_db_history(get_chat_history(db, customer_id, session_id, limit=50))
                return ChatResponse(reply=response_text, history=final_history, human_handover_required=False)

            # 3. ƒê√£ c√≥ ƒë·ªß th√¥ng tin - ki·ªÉm tra kh√°ch h√†ng c≈© qua s·ªë ƒëi·ªán tho·∫°i (n·∫øu ch∆∞a c√≥ profile)
            if not existing_profile and current_info.get("phone"):
                phone_profile = get_customer_profile_by_phone(db, customer_id, current_info["phone"])
                if phone_profile and has_previous_orders(db, customer_id, phone=current_info["phone"]):
                    response_text = f"D·∫°, em nh·∫≠n ra anh/ch·ªã l√† kh√°ch h√†ng quen c·ªßa shop r·ªìi ·∫°! Anh/ch·ªã ƒë√£ t·ª´ng ƒë·∫∑t h√†ng v·ªõi s·ªë ƒëi·ªán tho·∫°i n√†y. Em s·∫Ω c·∫≠p nh·∫≠t th√¥ng tin m·ªõi cho anh/ch·ªã."
                    session_data["existing_profile_id"] = phone_profile.id
                    _update_chat_history(db, customer_id, session_id, user_query, response_text, session_data)
                    final_history = _format_db_history(get_chat_history(db, customer_id, session_id, limit=50))
                    # Kh√¥ng return ·ªü ƒë√¢y, ti·∫øp t·ª•c x·ª≠ l√Ω t·∫°o ƒë∆°n h√†ng

            # 4. T·∫°o/c·∫≠p nh·∫≠t profile v√† ƒë∆°n h√†ng
            if not missing_info:
                pending_items = session_data.get("pending_purchase_item", [])
                if not pending_items:
                    response_text = "D·∫°, anh ch·ªã ƒë·ª£i ch√∫t, em ch∆∞a t√¨m th·∫•y s·∫£n ph·∫©m ƒë·ªÉ ƒë·∫∑t h√†ng ·∫°. Nh√¢n vi√™n ph·ª• tr√°ch b√™n em s·∫Ω v√†o tr·∫£ l·ªùi ngay ·∫°."
                    _update_session_state(db, customer_id, session_id, "human_calling", session_data)
                    session_data["state"] = None
                    _update_chat_history(db, customer_id, session_id, user_query, response_text, session_data)
                    final_history = _format_db_history(get_chat_history(db, customer_id, session_id, limit=50))
                    return ChatResponse(reply=response_text, history=final_history)

                # T·∫°o/c·∫≠p nh·∫≠t customer profile
                profile = create_or_update_customer_profile(
                    db=db,
                    customer_id=customer_id,
                    session_id=session_id,
                    name=current_info.get("name"),
                    phone=current_info.get("phone"),
                    address=current_info.get("address")
                )

                # T·∫°o ƒë∆°n h√†ng
                order = create_order(
                    db=db,
                    customer_profile_id=profile.id,
                    customer_id=customer_id,
                    session_id=session_id,
                    order_status="confirmed"
                )

                # Th√™m s·∫£n ph·∫©m v√†o ƒë∆°n h√†ng
                purchase_items_obj = []
                for item in pending_items:
                    item_data = item.get("evaluation", {}).get("product", {})
                    quantity = item.get("intent", {}).get("quantity", 1)
                    props_value = item_data.get("properties")
                    final_props = None
                    if props_value is not None and str(props_value).strip() not in ['0', '']:
                        final_props = str(props_value)
                    
                    # Th√™m v√†o database
                    add_order_item(
                        db=db,
                        order_id=order.id,
                        product_name=item_data.get("product_name", "N/A"),
                        properties=final_props,
                        quantity=quantity
                    )
                    
                    # Th√™m v√†o response object
                    purchase_items_obj.append(PurchaseItem(
                        product_name=item_data.get("product_name", "N/A"),
                        properties=final_props,
                        quantity=quantity
                    ))

                customer_info_obj = CustomerInfo(
                    name=current_info.get("name"),
                    phone=current_info.get("phone"),
                    address=current_info.get("address"),
                    items=purchase_items_obj
                )
                
                response_text = f"D·∫° em ƒë√£ nh·∫≠n ƒë∆∞·ª£c ƒë·∫ßy ƒë·ªß th√¥ng tin v√† t·∫°o ƒë∆°n h√†ng #{order.id} th√†nh c√¥ng. Em c·∫£m ∆°n anh/ch·ªã! /-heart"
                _update_session_state(db, customer_id, session_id, "active", session_data)
                session_data["pending_purchase_item"] = None
                session_data["has_past_purchase"] = True
                
                _update_chat_history(db, customer_id, session_id, user_query, response_text, session_data)
                final_history = _format_db_history(get_chat_history(db, customer_id, session_id, limit=50))
                
                return ChatResponse(
                    reply=response_text,
                    history=final_history,
                    customer_info=customer_info_obj,
                    has_purchase=True,
                    human_handover_required=False
                )

    retrieved_data, product_images = [], []
    response_text = ""

    if analysis_result.get("is_add_to_order_intent"):
        response_text = "D·∫° v√¢ng, anh/ch·ªã mu·ªën mua th√™m s·∫£n ph·∫©m n√†o ·∫°?"
        session_data["last_query"] = None

    if analysis_result.get("is_bank_transfer"):
        response_text = "D·∫°, anh/ch·ªã ƒë·ª£i ch√∫t, nh√¢n vi√™n b√™n em s·∫Ω v√†o ngay ·∫°."
        _update_session_state(db, customer_id, session_id, "human_calling", session_data)
        _update_chat_history(db, customer_id, session_id, user_query, response_text, session_data)
        final_history = _format_db_history(get_chat_history(db, customer_id, session_id, limit=50))
        return ChatResponse(
            reply=response_text,
            history=final_history,
            human_handover_required=True,
            has_negativity=False
        )

    if analysis_result.get("is_negative"):
        session_data["negativity_score"] += 1
        if session_data["negativity_score"] >= 3:
            response_text = "Em ƒë√£ b√°o nh√¢n vi√™n ph·ª• tr√°ch, anh/ch·ªã vui l√≤ng ƒë·ª£i ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ ngay ·∫°."
            _update_session_state(db, customer_id, session_id, "human_calling", session_data)
            session_data["negativity_score"] = 0
            _update_chat_history(db, customer_id, session_id, user_query, response_text, session_data)
            final_history = _format_db_history(get_chat_history(db, customer_id, session_id, limit=50))
            
            return ChatResponse(
                reply=response_text,
                history=final_history,
                human_handover_required=False,
                has_negativity=True
            )

    if analysis_result.get("wants_store_info"):
        if not db:
            response_text = "D·∫°, em xin l·ªói, em ch∆∞a c√≥ th√¥ng tin c·ª≠a h√†ng ·∫°."
        else:
            store_info = get_customer_store_info(db, customer_id)
            if store_info:
                parts = []
                if store_info.get("store_name"):
                    parts.append(f"D·∫°, anh/ch·ªã c√≥ th·ªÉ ƒë·∫øn xem v√† mua h√†ng tr·ª±c ti·∫øp t·∫°i c·ª≠a h√†ng {store_info['store_name']} ·ªü ƒë·ªãa ch·ªâ:")
                else:
                    parts.append("D·∫°, anh/ch·ªã c√≥ th·ªÉ ƒë·∫øn xem v√† mua h√†ng tr·ª±c ti·∫øp t·∫°i ƒë·ªãa ch·ªâ:")
                
                if store_info.get("store_address"):
                    parts.append(f"üëâ {store_info['store_address']}.")
                if store_info.get("store_phone"):
                    parts.append(f"üëâ SƒêT: {store_info['store_phone']}")
                if store_info.get("store_website"):
                    parts.append(f"üëâ Website: {store_info['store_website']}")
                if store_info.get("store_facebook"):
                    parts.append(f"üëâ Facebook: {store_info['store_facebook']}")
                if store_info.get("store_address_map"):
                    parts.append(f"üëâ Link google map: {store_info['store_address_map']}")

                response_text = "\n".join(parts)
                map_image_url = store_info.get("store_image")
                map_image = []
                if map_image_url:
                    map_image.append(
                        ImageInfo(
                            product_name=store_info.get("store_name", "Th√¥ng tin c·ª≠a h√†ng"),
                            image_url=map_image_url,
                            product_link=""
                        )
                    )
                
                _update_chat_history(db, customer_id, session_id, user_query, response_text, session_data)
                final_history = _format_db_history(get_chat_history(db, customer_id, session_id, limit=50))
                return ChatResponse(
                    reply=response_text,
                    history=final_history,
                    human_handover_required=False,
                    has_negativity=False,
                    images=map_image,
                    has_images=bool(map_image)
                )
            else:
                response_text = f"D·∫°, em xin l·ªói, em ch∆∞a c√≥ th√¥ng tin cho c·ª≠a h√†ng ·∫°."
        
        _update_chat_history(db, customer_id, session_id, user_query, response_text, session_data)
        final_history = _format_db_history(get_chat_history(db, customer_id, session_id, limit=50))
        return ChatResponse(reply=response_text, history=final_history)

    if analysis_result.get("wants_warranty_service"):
        if session_data.get("has_past_purchase"):
            response_text = "D√° anh/ch·ªã ƒë·ª£i ch√∫t, nh√¢n vi√™n ph·ª• tr√°ch b·∫£o h√†nh b√™n em s·∫Ω v√†o tr·∫£ l·ªùi ngay ·∫°."
            _update_session_state(db, customer_id, session_id, "human_calling", session_data)
            _update_chat_history(db, customer_id, session_id, user_query, response_text, session_data)
            final_history = _format_db_history(get_chat_history(db, customer_id, session_id, limit=50))
            return ChatResponse(
                reply=response_text,
                history=final_history,
                human_handover_required=True,
                has_negativity=False
            )

        response_text = "D√° anh/ch·ªã ƒë·ª£i ch√∫t, nh√¢n vi√™n ph·ª• tr√°ch b·∫£o h√†nh b√™n em s·∫Ω v√†o tr·∫£ l·ªùi ngay ·∫°."
        _update_session_state(db, customer_id, session_id, "human_calling", session_data)
        _update_chat_history(db, customer_id, session_id, user_query, response_text, session_data)
        final_history = _format_db_history(get_chat_history(db, customer_id, session_id, limit=50))
        return ChatResponse(
            reply=response_text,
            history=final_history,
            human_handover_required=True,
            has_negativity=False
        )
    
    if analysis_result.get("wants_human_agent"):
        print(f"üéØ WANTS_HUMAN_AGENT detected! Setting status to human_calling...")
        response_text = "Em ƒë√£ b√°o nh√¢n vi√™n ph·ª• tr√°ch, anh/ch·ªã vui l√≤ng ƒë·ª£i ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ ngay ·∫°."
        _update_session_state(db, customer_id, session_id, "human_calling", session_data)
        
        _update_chat_history(db, customer_id, session_id, user_query, response_text, session_data)
        final_history = _format_db_history(get_chat_history(db, customer_id, session_id, limit=50))
        
        return ChatResponse(
            reply=response_text,
            history=final_history,
            human_handover_required=True,
            has_negativity=False
        )

    if analysis_result.get("is_purchase_intent"):
        

        if "pending_order" not in session_data or session_data["pending_order"] is None:
            products_from_intent = analysis_result.get("search_params", {}).get("products", [])
            if products_from_intent:
                session_data["pending_order"] = [
                    {"intent": item, "status": "pending", "evaluation": None}
                    for item in products_from_intent
                ]

        if "pending_order" in session_data and session_data["pending_order"]:
            history_text = format_history_text(history, limit=6)
            
            for item in session_data["pending_order"]:
                if item["status"] != "confirmed":
                    item_intent = item["intent"]
                    product_name_intent = item_intent.get("product_name")
                    properties_intent = item_intent.get("properties")
                    
                    sub_query = f"kh√°ch mu·ªën mua {item_intent.get('quantity', 1)} {product_name_intent}"
                    if properties_intent:
                        sub_query += f" lo·∫°i {properties_intent}"

                    query_for_evaluation = user_query
                    if not (item.get("evaluation") and item["evaluation"].get("type") == "CLOSE_MATCH"):
                         query_for_evaluation = sub_query


                    best_evaluation = None
                    MAX_SEARCH_PAGES = 5 
                    for page in range(MAX_SEARCH_PAGES):
                        found_products = search_products(
                            customer_id=sanitized_customer_id,
                            product_name=product_name_intent,
                            category=item_intent.get("category"),
                            properties=properties_intent,
                            offset=page * PAGE_SIZE
                        )
                        
                        previous_suggestion = None
                        if item.get("evaluation") and item["evaluation"].get("type") == "CLOSE_MATCH":
                            previous_suggestion = item["evaluation"].get("product")

                        if previous_suggestion:
                            suggestion_key = _get_product_key(previous_suggestion)
                            if not found_products or not any(_get_product_key(p) == suggestion_key for p in found_products):
                                found_products = [previous_suggestion] + (found_products or [])
                        
                        if not found_products and page > 0: break

                        current_evaluation = evaluate_and_choose_product(
                            query_for_evaluation, history_text, found_products, model_choice, api_key=api_key
                        )

                        if current_evaluation.get("type") == "PERFECT_MATCH":
                            best_evaluation = current_evaluation
                            break
                        
                        if not best_evaluation or current_evaluation.get("score", 0.0) > best_evaluation.get("score", 0.0):
                            best_evaluation = current_evaluation
                        
                        if best_evaluation and best_evaluation.get("score", 0.0) >= 0.8:
                            break
                        
                        if not found_products: break
                    
                    item["evaluation"] = best_evaluation if best_evaluation else {"type": "NO_MATCH"}
                    
                    if item["evaluation"].get("type") == "PERFECT_MATCH":
                        product_data = item["evaluation"]["product"]
                        requested_quantity = item["intent"].get("quantity", 1)
                        try:
                            stock_quantity = int(product_data.get("inventory", 0))
                        except (ValueError, TypeError):
                            stock_quantity = 0

                        if stock_quantity <= 0:
                            item["status"] = "failed"
                            item["failure_reason"] = "out_of_stock"
                        elif stock_quantity < requested_quantity:
                            item["status"] = "failed"
                            item["failure_reason"] = "insufficient_stock"
                        else:
                            item["status"] = "confirmed"
                    else:
                        item["status"] = "failed"

            confirmed_items = [item for item in session_data["pending_order"] if item["status"] == "confirmed"]
            failed_items_list = [item for item in session_data["pending_order"] if item["status"] == "failed"]

            response_parts = []

            if confirmed_items:
                confirmed_names = [
                    f"{item['intent'].get('quantity', 1)} x {item['evaluation']['product'].get('product_name')}"
                    + (f" ({str(props).lower()})" if (props := item['evaluation']['product'].get('properties', 'N/A')) not in [0, '0', None, '', 'N/A'] else '')
                    for item in confirmed_items
                ]
                response_parts.append(f"D·∫°, em x√°c nh·∫≠n c√°c s·∫£n ph·∫©m: {', '.join(confirmed_names)}.\n")

            if failed_items_list:
                not_found_items = [item for item in failed_items_list if item['evaluation'].get('type') == 'NO_MATCH']
                close_match_items = [item for item in failed_items_list if item['evaluation'].get('type') == 'CLOSE_MATCH']
                out_of_stock_items = [item for item in failed_items_list if item.get('failure_reason') == 'out_of_stock']
                insufficient_stock_items = [item for item in failed_items_list if item.get('failure_reason') == 'insufficient_stock']

                if out_of_stock_items:
                    product_names = [item['evaluation']['product'].get('product_name') + (f" ({str(props).lower()})" if (props := item['evaluation']['product'].get('properties', 'N/A')) not in [0, '0', None, '', 'N/A'] else '') for item in out_of_stock_items]
                    response_parts.append(f"D·∫° em r·∫•t ti·∫øc, c√°c s·∫£n ph·∫©m n√†y hi·ªán ƒëang h·∫øt h√†ng r·ªìi ·∫°: {', '.join(product_names)}.")

                if insufficient_stock_items:
                    messages = []
                    for item in insufficient_stock_items:
                        product_data = item['evaluation']['product']
                        stock = product_data.get('inventory', 0)
                        messages.append(f"{product_data.get('product_name')}" + (f" ({str(props).lower()})" if (props := product_data.get('properties', 'N/A')) not in [0, '0', None, '', 'N/A'] else '') + f" (ch·ªâ c√≤n {stock} s·∫£n ph·∫©m)")
                    response_parts.append(f"D·∫°, s·ªë l∆∞·ª£ng m·ªôt s·ªë s·∫£n ph·∫©m trong kho kh√¥ng ƒë·ªß ·∫°: {'; '.join(messages)}. Anh/ch·ªã c√≥ mu·ªën l·∫•y s·ªë l∆∞·ª£ng n√†y kh√¥ng ·∫°?")

                if not_found_items:
                    grouped_failures = defaultdict(list)
                    for item in not_found_items:
                        product_name = item.get('intent', {}).get('product_name', 'S·∫£n ph·∫©m kh√¥ng x√°c ƒë·ªãnh')
                        properties = item.get('intent', {}).get('properties')
                        grouped_failures[product_name].append(properties)
                    
                    failure_messages = []
                    for name, props in grouped_failures.items():
                        clean_props = [p for p in props if p]
                        if clean_props:
                            failure_messages.append(f"{name} (c√°c lo·∫°i: {', '.join(clean_props)})")
                        else:
                            failure_messages.append(name)
                    response_parts.append(f"Em ch∆∞a t√¨m th·∫•y c√°c s·∫£n ph·∫©m: {'; '.join(failure_messages)}.")

                if close_match_items:
                    suggestion_messages = []
                    for item in close_match_items:
                        eval_data = item['evaluation']
                        suggested_prod = eval_data['product']
                        props = suggested_prod.get('properties', 'N/A')
                        full_name = f"{suggested_prod.get('product_name')}" + (f" ({str(props).lower()})" if (props := suggested_prod.get('properties', 'N/A')) not in [0, '0', None, '', 'N/A'] else '')
                        suggestion_messages.append(f"  - {full_name}")
                    response_parts.append(f"Em t√¨m th·∫•y m·ªôt s·ªë s·∫£n ph·∫©m g·∫ßn gi·ªëng anh ch·ªã n√≥i, anh/ch·ªã xem c√≥ ph·∫£i kh√¥ng ·∫°:\n{'\n'.join(suggestion_messages)}")


            if not failed_items_list and confirmed_items:
                session_data["state"] = "awaiting_purchase_confirmation"
                
                session_data["pending_purchase_item"] = confirmed_items
                response_parts.append("Anh/ch·ªã c√≥ mu·ªën em l√™n ƒë∆°n cho nh·ªØng s·∫£n ph·∫©m n√†y kh√¥ng ·∫°?")
                session_data["pending_order"] = None
            
            response_text = " ".join(response_parts)

        else:
            response_text = "D·∫°, anh/ch·ªã mu·ªën mua s·∫£n ph·∫©m n√†o ·∫°?"

    elif asking_for_more and session_data.get("last_query"):
        response_text, retrieved_data, product_images = _handle_more_products(
            customer_id, user_query, session_data, history, model_choice, analysis_result, db, api_key=api_key
        )
    else:
        session_data["shown_product_keys"] = []  # S·ª≠ d·ª•ng list thay v√¨ set
        response_text, retrieved_data, product_images = _handle_new_query(
            customer_id, user_query, session_data, history, model_choice, analysis_result, db, api_key=api_key
        )

    _update_chat_history(db, customer_id, session_id, user_query, response_text, session_data)
    images = _process_images(analysis_result.get("wants_images", False), retrieved_data, product_images)

    action_data = None
    is_general_query = not analysis_result.get("is_purchase_intent") and session_data.get("state") is None
    if is_general_query and len(retrieved_data) == 1:
        product = retrieved_data[0]
        product_link = product.get("link_product")
        if product_link and isinstance(product_link, str) and product_link.startswith("http"):
            action_data = {"action": "redirect", "url": product_link}


    final_history = _format_db_history(get_chat_history(db, customer_id, session_id, limit=50))
    return ChatResponse(
        reply=response_text,
        history=final_history,
        images=images,
        has_images=len(images) > 0,
        has_purchase=analysis_result.get("is_purchase_intent", False),
        human_handover_required=analysis_result.get("human_handover_required", False),
        has_negativity=False,
        action_data=action_data
    )

async def control_bot_endpoint(request: ControlBotRequest, customer_id: str, session_id: str, db: Session):
    """
    ƒêi·ªÅu khi·ªÉn tr·∫°ng th√°i c·ªßa bot (d·ª´ng ho·∫∑c ti·∫øp t·ª•c).
    """
    composite_session_id = f"{customer_id}-{session_id}"
    
    # with chat_history_lock: # Removed as per new_code
    #     if composite_session_id not in chat_history: # Removed as per new_code
    #         chat_history[composite_session_id] = { # Removed as per new_code
    #             "messages": [], # Removed as per new_code
    #             "last_query": None, # Removed as per new_code
    #             "offset": 0, # Removed as per new_code
    #             "shown_product_keys": set(), # Removed as per new_code
    #             "state": None, # Removed as per new_code
    #             "pending_purchase_item": None, # Removed as per new_code
    #             "negativity_score": 0, # Removed as per new_code
    #             "handover_timestamp": None, # Removed as per new_code
    #             "collected_customer_info": {}, # Removed as per new_code
    #             "has_past_purchase": False, # Removed as per new_code
    #             "pending_order": None # Removed as per new_code
    #         }
    #         print(f"ƒê√£ t·∫°o session m·ªõi: {composite_session_id} th√¥ng qua control endpoint.") # Removed as per new_code

    command = request.command.lower()
    
    if command == "stop":
        create_or_update_session_control(db, customer_id, session_id, "stopped")
        
        # with chat_history_lock: # Removed as per new_code
        #     chat_history[composite_session_id]["collected_customer_info"] = {} # Removed as per new_code
        
        return {"status": "success", "message": f"Bot cho session {composite_session_id} ƒë√£ ƒë∆∞·ª£c t·∫°m d·ª´ng."}
    
    elif command == "start":
        session_control = get_session_control(db, customer_id, session_id)
        current_status = session_control.status if session_control else "active"
        
        if current_status == "stopped":
            create_or_update_session_control(db, customer_id, session_id, "active")
            
            # with chat_history_lock: # Removed as per new_code
            #     chat_history[composite_session_id]["negativity_score"] = 0 # Removed as per new_code
            #     chat_history[composite_session_id]["messages"].append({ # Removed as per new_code
            #         "user": "[SYSTEM]", # Removed as per new_code
            #         "bot": "Bot ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t l·∫°i b·ªüi qu·∫£n tr·ªã vi√™n." # Removed as per new_code
            #     })
            # return {"status": "success", "message": f"Bot cho session {composite_session_id} ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t l·∫°i."} # Removed as per new_code
        else:
            return {"status": "no_change", "message": f"Bot cho session {composite_session_id} ƒë√£ ho·∫°t ƒë·ªông."}
    
    else:
        raise HTTPException(status_code=400, detail="Command kh√¥ng h·ª£p l·ªá. Ch·ªâ ch·∫•p nh·∫≠n 'start' ho·∫∑c 'stop'.")

async def human_chatting_endpoint(customer_id: str, session_id: str, db: Session):
    """
    Chuy·ªÉn sang tr·∫°ng th√°i human_chatting.
    """
    composite_session_id = f"{customer_id}-{session_id}"
    
    # with chat_history_lock: # Removed as per new_code
    #     if composite_session_id not in chat_history: # Removed as per new_code
    #         chat_history[composite_session_id] = { # Removed as per new_code
    #             "messages": [], # Removed as per new_code
    #             "last_query": None, # Removed as per new_code
    #             "offset": 0, # Removed as per new_code
    #             "shown_product_keys": set(), # Removed as per new_code
    #             "state": None, # Removed as per new_code
    #             "pending_purchase_item": None, # Removed as per new_code
    #             "negativity_score": 0, # Removed as per new_code
    #             "handover_timestamp": None, # Removed as per new_code
    #             "collected_customer_info": {}, # Removed as per new_code
    #             "has_past_purchase": False, # Removed as per new_code
    #             "pending_order": None # Removed as per new_code
    #         }
    #         message = f"Session {composite_session_id} ƒë√£ ƒë∆∞·ª£c t·∫°o m·ªõi v√† chuy·ªÉn sang tr·∫°ng th√°i human_chatting." # Removed as per new_code
    #         print(f"ƒê√£ t·∫°o session m·ªõi: {composite_session_id} th√¥ng qua human_chatting endpoint.") # Removed as per new_code
    #     else:
    #         message = f"Bot cho session {composite_session_id} ƒë√£ chuy·ªÉn sang tr·∫°ng th√°i human_chatting." # Removed as per new_code

    create_or_update_session_control(db, customer_id, session_id, "human_chatting")
    
    # with chat_history_lock: # Removed as per new_code
    #     chat_history[composite_session_id]["handover_timestamp"] = time.time() # Removed as per new_code
    
    return {"status": "success", "message": f"Bot cho session {composite_session_id} ƒë√£ chuy·ªÉn sang tr·∫°ng th√°i human_chatting."}
 
def _handle_more_products(customer_id: str, user_query: str, session_data: dict, history: list, model_choice: str, analysis: dict, db: Session, api_key: str = None):
    last_query = session_data.get("last_query")
    if not last_query:
        return "D·∫°, em ch∆∞a bi·∫øt m√¨nh ƒëang t√¨m s·∫£n ph·∫©m n√†o ƒë·ªÉ xem th√™m ·∫°.", [], []
        
    new_offset = session_data.get("offset", 0) + PAGE_SIZE
    sanitized_customer_id = sanitize_for_es(customer_id)

    all_new_products = []
    products_to_search = last_query.get("products", [])

    # Fallback for old last_query format
    if not products_to_search and "product_name" in last_query:
        products_to_search = [last_query]

    for product_intent in products_to_search:
        retrieved_data = search_products(
            customer_id=sanitized_customer_id,
            product_name=product_intent.get("product_name"),
            category=product_intent.get("category"),
            properties=product_intent.get("properties"),
            offset=new_offset,
            strict_properties=False,
            strict_category=False
        )
        all_new_products.extend(retrieved_data)

    history_text = format_history_text(history, limit=5)
    # L·ªçc t·∫•t c·∫£ s·∫£n ph·∫©m m·ªõi t√¨m ƒë∆∞·ª£c c√πng l√∫c
    retrieved_data = filter_products_with_ai(user_query, history_text, all_new_products, api_key=api_key)
    
    shown_keys = set(session_data.get("shown_product_keys", []))  # Convert list to set for checking
    new_products = [p for p in retrieved_data if _get_product_key(p) not in shown_keys]

    if not new_products:
        response_text = "D·∫°, h·∫øt r·ªìi ·∫°."
        session_data["offset"] = new_offset
        return response_text, [], []



    # Th√™m product keys m·ªõi v√†o list (tr√°nh duplicate)
    for p in new_products:
        product_key = _get_product_key(p)
        if product_key not in session_data["shown_product_keys"]:
            session_data["shown_product_keys"].append(product_key)

    # Ki·ªÉm tra is_sale
    session_id = session_data.get("session_id", "")
    is_sale_customer = False
    if session_id:
        customer_sale_info = get_customer_is_sale(db, customer_id, session_id)
        if customer_sale_info and customer_sale_info.is_sale:
            is_sale_customer = True


    result = generate_llm_response(
        user_query, new_products, history, analysis["wants_specs"], model_choice, True, analysis["wants_images"], db=db, customer_id=customer_id, api_key=api_key, is_sale=is_sale_customer
    )
    
    product_images = []
    if analysis["wants_images"] and isinstance(result, dict):
        response_text = result["answer"].strip()
        product_images = result["product_images"]
        if response_text and product_images:
            response_text = "D·∫° ƒë√¢y l√† h√¨nh ·∫£nh s·∫£n ph·∫©m em g·ª≠i anh/ch·ªã tham kh·∫£o ·∫°:\n" + response_text
    else:
        response_text = result

    session_data["offset"] = new_offset
    session_data["shown_product_keys"] = shown_keys
    return response_text, new_products, product_images

def _handle_new_query(customer_id: str, user_query: str, session_data: dict, history: list, model_choice: str, analysis: dict, db: Session, api_key: str = None):
    retrieved_data = []
    product_images = []
    sanitized_customer_id = sanitize_for_es(customer_id)
    if analysis["needs_search"]:
        search_params = analysis.get("search_params", {})
        products_list = search_params.get("products", [])
        
        all_retrieved_data = []
        if products_list:
            history_text = format_history_text(history, limit=5)
            
            for product_intent in products_list:
                product_name_to_search = product_intent.get("product_name", user_query)
                category_to_search = product_intent.get("category", user_query)
                properties_to_search = product_intent.get("properties")

                # T√¨m ki·∫øm cho t·ª´ng s·∫£n ph·∫©m
                found_products = search_products(
                    customer_id=sanitized_customer_id,
                    product_name=product_name_to_search,
                    category=category_to_search,
                    properties=properties_to_search,
                    offset=0,
                    strict_category=False,
                    strict_properties=False
                )
                
                # L·ªçc k·∫øt qu·∫£ v√† th√™m v√†o danh s√°ch chung
                if found_products:
                    # T·∫°o m·ªôt truy v·∫•n con cho AI filter ƒë·ªÉ n√≥ hi·ªÉu ng·ªØ c·∫£nh c·ªßa t·ª´ng s·∫£n ph·∫©m
                    sub_user_query = f"{product_name_to_search} {properties_to_search or ''}".strip()
                    filtered_products = filter_products_with_ai(sub_user_query, history_text, found_products, api_key=api_key)
                    all_retrieved_data.extend(filtered_products)

            retrieved_data = all_retrieved_data
            
            # L∆∞u l·∫°i to√†n b·ªô danh s√°ch s·∫£n ph·∫©m ƒë√£ t√¨m ki·∫øm
            session_data["last_query"] = {
                "products": products_list
            }
            session_data["offset"] = 0
            session_data["shown_product_keys"] = [_get_product_key(p) for p in retrieved_data]  # S·ª≠ d·ª•ng list thay v√¨ set
        else:
            session_data["last_query"] = None
            session_data["offset"] = 0
            session_data["shown_product_keys"] = []  # S·ª≠ d·ª•ng list thay v√¨ set

    # Ki·ªÉm tra is_sale
    session_id = session_data.get("session_id", "")
    is_sale_customer = False
    if session_id:
        customer_sale_info = get_customer_is_sale(db, customer_id, session_id)
        if customer_sale_info and customer_sale_info.is_sale:
            is_sale_customer = True

    result = generate_llm_response(
        user_query, retrieved_data, history, analysis["wants_specs"], model_choice, analysis["needs_search"], analysis["wants_images"], db=db, customer_id=customer_id, api_key=api_key, is_sale=is_sale_customer
    )
    
    if analysis["wants_images"] and isinstance(result, dict):
        response_text = result["answer"].strip()
        product_images = result["product_images"]
        if response_text and product_images:
            response_text = "D·∫° ƒë√¢y l√† h√¨nh ·∫£nh s·∫£n ph·∫©m em g·ª≠i anh/ch·ªã tham kh·∫£o ·∫°:\n" + response_text
    else:
        response_text = result

    return response_text, retrieved_data, product_images

def _update_chat_history(db: Session, customer_id: str, session_id: str, user_query: str, response_text: str, session_data: dict):
    """L∆∞u tin nh·∫Øn v√†o DB v√† c·∫≠p nh·∫≠t session_data."""
    add_chat_message(db, customer_id, session_id, 'user', user_query)
    add_chat_message(db, customer_id, session_id, 'bot', response_text)
    
    # JSON kh√¥ng l∆∞u ƒë∆∞·ª£c set
    if 'shown_product_keys' in session_data:
        session_data['shown_product_keys'] = list(session_data['shown_product_keys'])
        
    create_or_update_session_control(db, customer_id, session_id, status="active", session_data=session_data)

def _process_images(wants_images: bool, retrieved_data: list, product_images_names: list) -> list[ImageInfo]:
    images = []
    if not wants_images or not retrieved_data or not product_images_names:
        return images

    product_map = { f"{p.get('product_name', '')} ({p.get('properties', '')})": p for p in retrieved_data if p.get('product_name')}

    for name in product_images_names:
        product_data = product_map.get(name)
        if product_data:
            image_data = product_data.get('avatar_images')
            if not image_data:
                continue

            primary_image_url = None
            if isinstance(image_data, list) and image_data:
                for url in image_data:
                    if isinstance(url, str) and url.strip():
                        primary_image_url = url
                        break
            elif isinstance(image_data, str) and image_data.strip():
                primary_image_url = image_data

            if primary_image_url:
                images.append(ImageInfo(
                    product_name=product_data.get('product_name', ''),
                    image_url=primary_image_url,
                    product_link=str(product_data.get('link_product', ''))
                ))
    return images

async def power_off_bot_endpoint(request: ControlBotRequest):
    global bot_running
    command = request.command.lower()
    with bot_state_lock:
        if command == "stop":
            bot_running = False
            return {"status": "success", "message": "Bot ƒë√£ ƒë∆∞·ª£c t·∫°m d·ª´ng."}
        elif command == "start":
            bot_running = True
            return {"status": "success", "message": "Bot ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t l·∫°i."}
        elif command == "status":
            status_message = "Bot ƒëang ch·∫°y" if bot_running else "Bot ƒë√£ d·ª´ng"
            return {"status": "info", "message": status_message}
        else:
            raise HTTPException(status_code=400, detail="Invalid command. Use 'start' or 'stop'.")

async def power_off_bot_customer_endpoint(customer_id: str, request: ControlBotRequest, db: Session):
    """
    D·ª´ng ho·∫∑c kh·ªüi ƒë·ªông bot cho m·ªôt customer_id c·ª• th·ªÉ.
    """
    command = request.command.lower()
    
    if command == "stop":
        # T·∫Øt bot cho customer trong b·∫£ng BotStatus
        power_off_bot_for_customer(db, customer_id)
        return {"status": "success", "message": f"Bot ƒë√£ ƒë∆∞·ª£c t·∫Øt cho customer {customer_id}. T·∫•t c·∫£ sessions c·ªßa customer n√†y s·∫Ω kh√¥ng ho·∫°t ƒë·ªông."}
    
    elif command == "start":
        # B·∫≠t bot cho customer trong b·∫£ng BotStatus
        power_on_bot_for_customer(db, customer_id)
        return {"status": "success", "message": f"Bot ƒë√£ ƒë∆∞·ª£c b·∫≠t cho customer {customer_id}. T·∫•t c·∫£ sessions c·ªßa customer n√†y s·∫Ω ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng."}
    
    elif command == "status":
        # Ki·ªÉm tra tr·∫°ng th√°i bot c·ªßa customer t·ª´ b·∫£ng BotStatus
        bot_active = is_bot_active(db, customer_id)
        sessions = get_all_session_controls_by_customer(db, customer_id)
        
        status_message = f"Customer {customer_id}: Bot {'ƒêANG HO·∫†T ƒê·ªòNG' if bot_active else 'ƒê√É T·∫ÆT'}"
        if sessions:
            status_message += f" - C√≥ {len(sessions)} session(s) trong h·ªá th·ªëng"
        else:
            status_message += " - Ch∆∞a c√≥ session n√†o"
        
        return {"status": "info", "message": status_message}
    
    else:
        raise HTTPException(status_code=400, detail="Invalid command. Use 'start', 'stop', or 'status'.")

async def get_session_controls_endpoint(customer_id: str, db: Session):
    """
    L·∫•y danh s√°ch t·∫•t c·∫£ session controls c·ªßa m·ªôt customer.
    """
    from database.database import get_all_session_controls_by_customer
    
    session_controls = get_all_session_controls_by_customer(db, customer_id)
    
    result = []
    for control in session_controls:
        result.append({
            "id": control.id,
            "customer_id": control.customer_id,
            "session_id": control.session_id,
            "session_name": control.session_name,
            "status": control.status,
            "created_at": control.created_at.isoformat() if control.created_at else None,
            "updated_at": control.updated_at.isoformat() if control.updated_at else None
        })
    
    return {"status": "success", "data": result}

async def get_chat_history_endpoint(customer_id: str, session_id: str, db: Session):
    """
    L·∫•y to√†n b·ªô l·ªãch s·ª≠ chat c·ªßa m·ªôt thread.
    """
    history_records = get_full_chat_history(db, customer_id, session_id)
    
    if not history_records:
        return {"status": "success", "data": []}

    result = []
    for record in history_records:
        result.append({
            "id": record.id,
            "customer_id": record.customer_id,
            "thread_id": record.thread_id,
            "role": record.role,
            "message": record.message,
            "created_at": record.created_at.isoformat()
        })
        
    return {"status": "success", "data": result}

async def get_bot_status_endpoint(customer_id: str, db: Session):
    """
    L·∫•y tr·∫°ng th√°i bot c·ªßa customer_id.
    """
    try:
        bot_status = get_bot_status(db, customer_id)
        is_active = is_bot_active(db, customer_id)
        
        if bot_status:
            return {
                "status": "success",
                "data": {
                    "customer_id": customer_id,
                    "bot_status": bot_status.status,
                    "is_active": is_active,
                    "created_at": bot_status.created_at.isoformat(),
                    "updated_at": bot_status.updated_at.isoformat() if bot_status.updated_at else None
                }
            }
        else:
            return {
                "status": "success",
                "data": {
                    "customer_id": customer_id,
                    "bot_status": "active",  # M·∫∑c ƒë·ªãnh
                    "is_active": is_active,
                    "created_at": None,
                    "updated_at": None,
                    "note": "Ch∆∞a c√≥ record trong database, tr·∫°ng th√°i m·∫∑c ƒë·ªãnh l√† active"
                }
            }
    except Exception as e:
        return {"status": "error", "message": f"L·ªói khi l·∫•y tr·∫°ng th√°i bot: {str(e)}"}

async def delete_chat_history_endpoint(customer_id: str, session_id: str, db: Session):
    """
    X√≥a l·ªãch s·ª≠ chat c·ªßa session_id thu·ªôc customer_id.
    """
    try:
        # Ki·ªÉm tra xem session c√≥ t·ªìn t·∫°i kh√¥ng
        session_control = get_session_control(db, customer_id, session_id)
        if not session_control:
            return {
                "status": "error", 
                "message": f"Kh√¥ng t√¨m th·∫•y session {session_id} cho customer {customer_id}"
            }
        
        # ƒê·∫øm s·ªë tin nh·∫Øn tr∆∞·ªõc khi x√≥a
        message_count = db.query(ChatHistory).filter(
            ChatHistory.customer_id == customer_id,
            ChatHistory.thread_id == session_id
        ).count()
        
        if message_count == 0:
            return {
                "status": "info",
                "message": f"Session {session_id} kh√¥ng c√≥ l·ªãch s·ª≠ chat n√†o ƒë·ªÉ x√≥a"
            }
        
        # X√≥a t·∫•t c·∫£ tin nh·∫Øn c·ªßa session
        deleted_count = db.query(ChatHistory).filter(
            ChatHistory.customer_id == customer_id,
            ChatHistory.thread_id == session_id
        ).delete()
        
        # Reset session data
        if session_control.session_data:
            session_control.session_data = {
                "messages": [],
                "last_query": None,
                "offset": 0,
                "shown_product_keys": [],  # S·ª≠ d·ª•ng list thay v√¨ set ƒë·ªÉ tr√°nh l·ªói JSON serialization
                "state": None,
                "pending_purchase_item": None,
                "negativity_score": 0,
                "handover_timestamp": None,
                "collected_customer_info": {},
                "has_past_purchase": False,
                "pending_order": None
            }
        
        db.commit()
        
        return {
            "status": "success",
            "message": f"ƒê√£ x√≥a {deleted_count} tin nh·∫Øn t·ª´ session {session_id} c·ªßa customer {customer_id}",
            "data": {
                "customer_id": customer_id,
                "session_id": session_id,
                "deleted_messages": deleted_count
            }
        }
        
    except Exception as e:
        db.rollback()
        return {"status": "error", "message": f"L·ªói khi x√≥a l·ªãch s·ª≠ chat: {str(e)}"}