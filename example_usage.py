#!/usr/bin/env python3
"""
Example usage c·ªßa c√°c b·∫£ng CustomerProfile, Order, OrderItem
Minh h·ªça c√°ch s·ª≠ d·ª•ng trong chatbot system
"""

import sys
import os

# Th√™m th∆∞ m·ª•c g·ªëc v√†o Python path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database.database import (
    SessionLocal, 
    create_or_update_customer_profile,
    has_previous_orders,
    create_order,
    add_order_item,
    get_customer_order_history,
    get_customer_profile_by_phone
)

def example_customer_flow():
    """V√≠ d·ª• flow x·ª≠ l√Ω kh√°ch h√†ng trong chatbot"""
    db = SessionLocal()
    
    try:
        print("=== DEMO CUSTOMER PROFILE & ORDER SYSTEM ===\n")
        
        # Th√¥ng tin demo
        customer_id = "shop123"
        session_id = "session_001"
        customer_name = "Nguy·ªÖn VƒÉn A"
        customer_phone = "0123456789"
        customer_address = "123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM"
        
        # 1. T·∫°o profile kh√°ch h√†ng m·ªõi
        print("1. T·∫°o profile kh√°ch h√†ng m·ªõi...")
        profile = create_or_update_customer_profile(
            db=db,
            customer_id=customer_id,
            session_id=session_id,
            name=customer_name,
            phone=customer_phone,
            address=customer_address
        )
        print(f"   ‚úÖ Profile ID: {profile.id}")
        print(f"   üìû Phone: {profile.phone}")
        print(f"   üìç Address: {profile.address}")
        
        # 2. Ki·ªÉm tra kh√°ch h√†ng c≈©
        print("\n2. Ki·ªÉm tra kh√°ch h√†ng ƒë√£ t·ª´ng mua h√†ng ch∆∞a...")
        is_returning_customer = has_previous_orders(db, customer_id, phone=customer_phone)
        print(f"   üîç Kh√°ch h√†ng c≈©: {'C√≥' if is_returning_customer else 'Kh√¥ng'}")
        
        # 3. T·∫°o ƒë∆°n h√†ng m·ªõi
        print("\n3. T·∫°o ƒë∆°n h√†ng m·ªõi...")
        order = create_order(
            db=db,
            customer_profile_id=profile.id,
            customer_id=customer_id,
            session_id=session_id,
            order_status="pending",
            notes="ƒê∆°n h√†ng t·ª´ chatbot"
        )
        print(f"   ‚úÖ Order ID: {order.id}")
        print(f"   üìã Status: {order.order_status}")
        
        # 4. Th√™m s·∫£n ph·∫©m v√†o ƒë∆°n h√†ng
        print("\n4. Th√™m s·∫£n ph·∫©m v√†o ƒë∆°n h√†ng...")
        
        # S·∫£n ph·∫©m 1
        item1 = add_order_item(
            db=db,
            order_id=order.id,
            product_name="iPhone 15 Pro",
            properties="M√†u xanh, 128GB",
            quantity=1,
            unit_price=25000000.0
        )
        
        # S·∫£n ph·∫©m 2
        item2 = add_order_item(
            db=db,
            order_id=order.id,
            product_name="·ªêp l∆∞ng iPhone",
            properties="M√†u ƒëen, silicon",
            quantity=2,
            unit_price=150000.0
        )
        
        print(f"   ‚úÖ ƒê√£ th√™m {item1.quantity}x {item1.product_name}")
        print(f"   ‚úÖ ƒê√£ th√™m {item2.quantity}x {item2.product_name}")
        
        # 5. Ki·ªÉm tra l·∫°i tr·∫°ng th√°i kh√°ch h√†ng
        print("\n5. Ki·ªÉm tra l·∫°i sau khi c√≥ ƒë∆°n h√†ng...")
        is_returning_customer_after = has_previous_orders(db, customer_id, phone=customer_phone)
        print(f"   üîç Kh√°ch h√†ng c≈©: {'C√≥' if is_returning_customer_after else 'Kh√¥ng'}")
        
        # 6. L·∫•y l·ªãch s·ª≠ ƒë∆°n h√†ng
        print("\n6. L·ªãch s·ª≠ ƒë∆°n h√†ng c·ªßa kh√°ch h√†ng...")
        order_history = get_customer_order_history(db, customer_id, phone=customer_phone)
        print(f"   üìä T·ªïng s·ªë ƒë∆°n h√†ng: {len(order_history)}")
        
        for order in order_history:
            print(f"   üì¶ Order #{order.id} - {order.order_status} - {order.created_at}")
        
        # 7. Demo t√¨m kh√°ch h√†ng c≈© trong session m·ªõi
        print("\n7. Demo kh√°ch h√†ng c≈© v√†o session m·ªõi...")
        new_session_id = "session_002"
        
        # T√¨m profile c≈© theo phone
        existing_profile = get_customer_profile_by_phone(db, customer_id, customer_phone)
        if existing_profile:
            print(f"   üéØ T√¨m th·∫•y kh√°ch h√†ng c≈©: {existing_profile.name}")
            print(f"   üìû Phone: {existing_profile.phone}")
            print(f"   üìç Address: {existing_profile.address}")
            
            # C·∫≠p nh·∫≠t session_id m·ªõi
            updated_profile = create_or_update_customer_profile(
                db=db,
                customer_id=customer_id,
                session_id=new_session_id,
                phone=customer_phone  # D√πng phone ƒë·ªÉ t√¨m profile c≈©
            )
            print(f"   ‚úÖ ƒê√£ c·∫≠p nh·∫≠t session_id: {updated_profile.session_id}")
        
        print("\nüéâ Demo ho√†n t·∫•t!")
        
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
        db.rollback()
    finally:
        db.close()

def example_chatbot_integration():
    """V√≠ d·ª• t√≠ch h·ª£p v√†o chatbot flow"""
    print("\n=== CHATBOT INTEGRATION EXAMPLE ===")
    print("""
    Trong chat_routes.py, b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng nh∆∞ sau:
    
    # 1. Khi kh√°ch h√†ng cung c·∫•p th√¥ng tin
    from database.database import create_or_update_customer_profile, has_previous_orders
    
    # Tr√≠ch xu·∫•t th√¥ng tin t·ª´ tin nh·∫Øn
    extracted_info = extract_customer_info(user_query, model_choice, api_key=api_key)
    
    # T·∫°o/c·∫≠p nh·∫≠t profile
    profile = create_or_update_customer_profile(
        db=db,
        customer_id=customer_id,
        session_id=session_id,
        name=extracted_info.get('name'),
        phone=extracted_info.get('phone'),
        address=extracted_info.get('address')
    )
    
    # 2. Ki·ªÉm tra kh√°ch h√†ng c≈©
    if extracted_info.get('phone'):
        is_returning = has_previous_orders(db, customer_id, phone=extracted_info['phone'])
        if is_returning:
            response_text = "D·∫°, em nh·∫≠n ra anh/ch·ªã l√† kh√°ch h√†ng quen c·ªßa shop r·ªìi ·∫°!"
    
    # 3. T·∫°o ƒë∆°n h√†ng khi x√°c nh·∫≠n mua
    if decision == "CONFIRM":
        order = create_order(
            db=db,
            customer_profile_id=profile.id,
            customer_id=customer_id,
            session_id=session_id,
            order_status="confirmed"
        )
        
        # Th√™m s·∫£n ph·∫©m v√†o ƒë∆°n h√†ng
        for item in pending_items:
            add_order_item(
                db=db,
                order_id=order.id,
                product_name=item['product_name'],
                properties=item.get('properties'),
                quantity=item.get('quantity', 1)
            )
    """)

if __name__ == "__main__":
    example_customer_flow()
    example_chatbot_integration()
